<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Serafin Letters
                    
                   
                 <desc>15th c. manuscript correspondence with parallel translation</desc>
                </title>
            </titleStmt>
            <publicationStmt>
                <publisher>eXistSolutions GmbH</publisher>
                <availability>
                    <licence target="https://www.gnu.org/licenses/gpl-3.0.en.html">Distributed under GNU General Public License</licence>
                    <p>Copyright 2017 <ref target="http://existsolutions.com">eXistSolutions GmbH</ref>
                    </p>
                    <p>This program is free software: you can redistribute it and/or modify
                        it under the terms of the GNU General Public License as published by
                        the Free Software Foundation, either version 3 of the License, or
                        (at your option) any later version.</p>
                    <p>This program is distributed in the hope that it will be useful,
                        but WITHOUT ANY WARRANTY; without even the implied warranty of
                        MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
                        GNU General Public License for more details.</p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>Generated by <ref target="http://tei-publisher.com">TEI Publisher</ref>
                </p>
                <p>born digital</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <pb:behaviour ident="glossary" output="latex"> 
                    <pb:param name="id" value="@xml:id"/>
                    <pb:param name="name"/>
                    <pb:param name="note"/>
                    <pb:template>\newglossaryentry{[[id]]} { 
                        name=[[name]],
                        description={[[note]]}
                    }</pb:template>
                </pb:behaviour>
            </tagsDecl>
        </encodingDesc>
        <revisionDesc>
            <change when="2018-08-31+02:00">Initial version</change>
        </revisionDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="serafin" source="teipublisher.odd">
                <elementSpec ident="TEI" mode="change">
                    <model output="latex" behaviour="section">
            <param name="header" value="teiHeader"/>
            <param name="title" value="teiHeader/fileDesc/titleStmt/title/node()"/>
            <param name="content" value=".//text[@type='source']/body"/>
            <param name="translation" value=".//text[@xml:lang='pl']"/>
            <param name="glossary" value="(teiHeader//particDesc/listPerson/person, teiHeader//settingDesc/listPlace/place)"/>
            <pb:template>\documentclass[10pt,a4paper,twoside]{article}
                            
\usepackage[latin,polish]{babel}
\usepackage{reledmac}
\usepackage{reledpar}
\usepackage{hyperref}
\usepackage{glossaries}
\makenoidxglossaries

\usepackage{fancyhdr,extramarks,xifthen}
\pagestyle{fancy}

\fancyhf{}
\fancyhead[LO,RE]{\footnotesize\volume}
\fancyhead[LE,RO]{\footnotesize\thepage}

[[glossary]]

\begin{document}

\setlength{\columnrulewidth}{0.2pt}
\setlength{\Lcolwidth}{0.425\textwidth}
\setlength{\Rcolwidth}{0.425\textwidth}
\columnsposition{C}
\numberlinefalse

[[header]]

\begin{pairs}

\begin{Leftside}
\beginnumbering
\selectlanguage{latin}
[[content]]
\endnumbering
\end{Leftside}

\begin{Rightside}
\beginnumbering
\selectlanguage{polish}
[[translation]]
\endnumbering
\end{Rightside}

\end{pairs}

\Columns

\printnoidxglossaries

\end{document}</pb:template>
        </model>
                    <model behaviour="document"/>
                </elementSpec>
                <elementSpec ident="p" mode="change">
                    <model output="latex" behaviour="paragraph"/>
                    <model behaviour="paragraph" useSourceRendition="true">
            <outputRendition>
            text-align: justify;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="lb" mode="change">
                    <model behaviour="omit" useSourceRendition="true"/>
                </elementSpec>
                <elementSpec ident="anchor" mode="change">
                    <model behaviour="note">
            <param name="content" value="let $target := '#' || @xml:id return root(.)//div[@type='notes']/note[@target=$target]"/>
        </model>
                </elementSpec>
                <elementSpec ident="persName" mode="add">
                    <model output="latex" behaviour="inline">
            <param name="id" value="substring-after(@ref, '#')"/>
            <pb:template>\glslink{[[id]]}{[[content]]}</pb:template>
        </model>
                    <model output="print" behaviour="inline">
            <outputRendition>
            color: #1565c0;
            </outputRendition>
        </model>
                    <model predicate="parent::person" behaviour="inline">
            <outputRendition scope="after">
            content: ': ';
            </outputRendition>
            <outputRendition>
            font-weight: bold;
            </outputRendition>
        </model>
                    <model behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="id(substring-after(@ref, '#'), collection($parameters?auxiliary))"/>
            <outputRendition>
            color: #1565c0;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="person" mode="add">
                    <model output="latex" behaviour="glossary">
            <param name="name" value="persName/text()"/>
            <param name="note" value="note"/>
        </model>
                    <model predicate="parent::listPerson" behaviour="inline"/>
                </elementSpec>
                <elementSpec ident="note" mode="change">
                    <model predicate="parent::person" behaviour="inline">
            <outputRendition scope="selected">
            content: ': ';
            </outputRendition>
        </model>
                </elementSpec>
        <elementSpec ident="placeName" mode="add">
                    <model output="latex" behaviour="inline">
            <param name="id" value="substring-after(@ref, '#')"/>
            <pb:template>\glslink{[[id]]}{[[content]]}</pb:template>
        </model>
                    <model output="print" behaviour="inline">
            <outputRendition>
            color: #ef6c00;
            </outputRendition>
        </model>
                    <model predicate="parent::place" behaviour="inline">
            <outputRendition scope="after">
            content: ': ';
            </outputRendition>
            <outputRendition>
            font-weight: bold;
            </outputRendition>
        </model>
                    <model behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="id(substring-after(@ref, '#'), collection($parameters?auxiliary))"/>
            <outputRendition>
            color: #ef6c00;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="orgName" mode="add">
                    <model output="print" behaviour="inline">
            <outputRendition>
            color: #2e7d32;
            </outputRendition>
        </model>
                    <model predicate="parent::org" behaviour="inline">
            <outputRendition scope="after">
            content: ': ';
            </outputRendition>
            <outputRendition>
            font-weight: bold;
            </outputRendition>
        </model>
                    <model behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="id(substring-after(@ref, '#'), collection($parameters?auxiliary))"/>
            <outputRendition>
            color: #2e7d32;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="title" mode="change">
                    <model predicate="$parameters?header='short'" behaviour="heading">
            <param name="level" value="5"/>
        </model>
                    <modelSequence predicate="parent::titleStmt/parent::fileDesc">
            <model predicate="preceding-sibling::title" behaviour="text">
                <param name="content" value="' â€” '"/>
            </model>
            <model behaviour="inline"/>
        </modelSequence>
                    <model predicate="not(@level) and parent::bibl" behaviour="inline"/>
                    <modelSequence predicate="@level='m' or not(@level)">
            <model behaviour="inline">
                <outputRendition>
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="ancestor::biblFull" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='s' or @level='j'">
            <model behaviour="inline">
                <outputRendition>
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (  ancestor::biblFull)" behaviour="text">
                <param name="content" value="', '"/>
            </model>
        </modelSequence>
                    <modelSequence predicate="@level='u' or @level='a'">
            <model behaviour="inline">
                <outputRendition>
                font-style: italic;
                </outputRendition>
            </model>
            <model predicate="following-sibling::* and     (    ancestor::biblFull)" behaviour="text">
                <param name="content" value="'. '"/>
            </model>
        </modelSequence>
                    <model behaviour="inline">
            <outputRendition>
            font-style: italic;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="seg" mode="change">
                    <model output="latex" behaviour="inline">
            <pb:template>\pstart [[content]] \pend</pb:template>
        </model>
                    <model behaviour="webcomponent" useSourceRendition="true">
            <param name="name" value="'pb-highlight'"/>
            <param name="key" value="replace(@xml:id, &#34;^\w\.(.*)$&#34;, &#34;$1&#34;)"/>
        </model>
                </elementSpec>
                <elementSpec ident="titleStmt" mode="change">
                    <model output="latex" behaviour="meta">
            <param name="content" value="."/>
        </model>
                    <model output="fo" behaviour="heading"/>
                    <modelSequence output="web" predicate="$parameters?header='short'">
            <model behaviour="link">
                <param name="content" value="title[1]"/>
                <param name="link" value="$parameters?doc"/>
            </model>
            <model behaviour="block">
                <param name="content" value="subsequence(title, 2)"/>
            </model>
            <model behaviour="block">
                <param name="content" value="author"/>
            </model>
        </modelSequence>
                    <model output="web" predicate="$parameters?header='letter'" behaviour="inline">
            <param name="content" value="title[not(@type)]"/>
        </model>
                    <model output="web" behaviour="heading">
            <param name="level" value="4"/>
        </model>
                </elementSpec>
                <elementSpec ident="teiHeader" mode="change">
                    <model output="latex" behaviour="block">
            <param name="content" value="(fileDesc/titleStmt/title[not(@type)], profileDesc/correspDesc)"/>
            <pb:template>\def\volume{[[content]]}</pb:template>
        </model>
                    <model output="fo" behaviour="omit"/>
                    <model output="web" predicate="$parameters?header='short'" behaviour="block"/>
                    <model output="web" predicate="$parameters?header='letter'" behaviour="heading">
            <param name="content" value="(fileDesc/titleStmt/title[not(@type)], profileDesc/correspDesc)"/>
            <param name="level" value="5"/>
        </model>
                    <model output="web" behaviour="metadata"/>
                </elementSpec>
                <elementSpec ident="correspAction" mode="add">
                    <model predicate="@type='sent'" behaviour="inline">
            <param name="content" value="(placeName, ', ', date)"/>
            <outputRendition scope="before">
            content: ' â€” ';
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="date" mode="change">
                    <model output="print" predicate="text()" behaviour="inline"/>
                    <model output="print" predicate="@when and not(text())" behaviour="inline">
            <param name="content" value="@when"/>
        </model>
                    <model output="web" predicate="@when" behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="format-date(xs:date(@when), '[D1o] [MNn] [Y]', (session:get-attribute('lang'), 'en')[1], (), ())"/>
        </model>
                    <model predicate="text()" behaviour="inline"/>
                </elementSpec>
            <elementSpec ident="place" mode="add">
                    <model output="latex" behaviour="glossary">
            <param name="name" value="placeName/text()"/>
            <param name="note" value="note"/>
        </model>
                    <model behaviour="inline"/>
                </elementSpec>
        <elementSpec ident="unclear" mode="change">
              <model behaviour="inline">
                <outputRendition scope="before">content: '[';</outputRendition>
                <outputRendition scope="after">content: '?]';</outputRendition>
                <outputRendition>color: grey;</outputRendition>
              </model>
            </elementSpec>
        <elementSpec ident="gap" mode="change">
              <model predicate="desc" behaviour="inline">
                <outputRendition>color: grey;</outputRendition>
              </model>
              <model predicate="@extent" behaviour="inline">
                <param name="content" value="@extent"/>
                <outputRendition scope="before">content: '[..';</outputRendition>
                <outputRendition scope="after">content: '..]';</outputRendition>
                <outputRendition>color: grey;</outputRendition>
              </model>
            <model predicate="@quantity" behaviour="alternate">
                <param name="default" value="."/>
                <param name="alternate" value="(@quantity, ' ', @unit)"/>
                <outputRendition scope="before">content: '[...]';</outputRendition>
                <outputRendition>color: grey;</outputRendition>
              </model>
              <model behaviour="inline">
                <outputRendition scope="before">content: '[...]';</outputRendition>
                <outputRendition>color: grey;</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="ex" mode="change">
              <model behaviour="inline">
                <outputRendition scope="before">content: '(';</outputRendition>

                <outputRendition scope="after">content: ')';</outputRendition>
            </model>
            </elementSpec>
            <elementSpec ident="sic" mode="change">
              <model predicate="parent::choice and count(parent::*/*) gt 1" behaviour="inline"/>
              <model behaviour="inline">
                <outputRendition scope="after">content: '(!)';</outputRendition>
              </model>
            </elementSpec>
            <elementSpec ident="subst" mode="change">
              <model behaviour="alternate">
                <param name="default" value="add"/>
                <param name="alternate" value="('substitution: ', del, ' ', del/@type)"/>
              </model>
            </elementSpec>
            <elementSpec ident="del" mode="change">
            <model predicate="parent::subst" behaviour="inline"/>
              <model behaviour="inline">
                <outputRendition> text-decoration: line-through;</outputRendition>
              </model>
            </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>